/* Comentário */

Cliente

Nome - caracter(30)
CPF - numerico(11)
Email - caracter(30)
Telefone - caracter(30)
Endereço - caracter(100)
Sexo - caracter(1)

/* agora começa o programa */


CREATE database projeto; /*cria uma database */

USE projeto;  /* conecta ao banco */

/* criar uma tabela */
create table cliente(
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	CPF INT(11),
	TELEFONE VARCHAR(30),
	ENDEREÇO VARCHAR(100)
);
/* O CHAR É BOM DE SER USADO QUANDO SE SABE EXATAMENTE O NÚMERO DE CARACTER */
SHOW TABLES; /* VE AS TABELAS DO BANCO */

DESC CLIENTE; /* PARA VER A DESCRIÇÃO DA TABELA */

/* para inserir dados na tabela */

insert into cliente values('João','M',NULL,988638273,'22923110','MAIA LACERDA- ESTACIO - RIO DE JANEIRO - RJ');
/* NESTE CASO TEM QUE INSERIR NA ORDEM DA TABELA, SE ALGUM VALOR FOR EM BRANCO DIGITE NULL */

/* OU */
INSERT INTO CLIENTE(NOME,SEXO,ENDEREÇO,TELEFONE,CPF) VALUES('LILIAN','F','SENADOR SOARES - TIJUCA - RIO DE JANEIRO - RJ','947785696',887774856);
/* A VANTAGEM É PODER ESCREVER NA ORDEM QUE VOCÊ QUISER */

/* OU (MAS ESSA FORMA SERVE SOMENTE NO MYSQL) */
INSERT INTO CLIENTE VALUES('ANA','F','ANA@GLOBO.COM',85548962,'548556985','PRES ANTONIO CARLOS - CENTRO - SAO PAULO - SP'),
('CARLA','F','CARLA@TERATI.COM.BR',7745828,'66587458','SAMUEL SILVA - CENTRO - BELO HORIZONTE - MG');

/* PARA FAZER UMA PROJEÇÃO ,OU SEJA MOSTRAR NA TELA */
SELECT NOW() AS DATA_HORA, 'BRUNO SOARES' AS ALUNO; /* VAI PRINTAR ISSO NA TELA, NÃO PRECISA TER NO BANCO DE DADOS */

SELECT NOME AS CLIENTE, SEXO, EMAIL, ENDEREÇO FROM CLIENTE; /* AGORA PEGOU DO BANCO DE DADOS */

SELECT * FROM CLIENTE; /* APENAS PARA FINS ACADEMICOS, MOSTRA A TABELA TODA */

/* PARA FILTRAR POR UM DADO */
SELECT NOME, SEXO, ENDEREÇO FROM CLIENTE
WHERE SEXO = 'F';  /* VAI PROCURAR NOS DADOS QUEM TEM O SEXO F E VAI PRINTAR O NOME, SEXO E ENDEREÇO */

/* PARA FILTRAR POR UM DADO QUE NÃO É EXATAMENTE IGUAL */
SELECT NOME, SEXO FROM CLIENTE
WHERE ENDEREÇO LIKE '%RJ%' /* VAI PROCURAR QUEM TEM RJ NO ENDEREÇO, % QUER DIZER QUALQUER COISA, NO CASO PODE TER QUALQUER COISA ANTES E DEPOIS DE RJ */

SELECT NOME, SEXO, EMAIL FROM CLIENTE
WHERE EMAIL IS NULL; /*PARA BUSCAR UM VALOR NULO */
WHERE EMAIL IS NOT NULL;/* PARA BUSCAR UM VALOR QUE NÃO É NULO */

STATUS; /* PARA SABER QUAL A DATABASE ATUAL, ENTRE OUTRAS COISAS */

/* NO SQL TAMBÉM PODE SER USADO OR E AND */
/*MUITO IMPORTANTE SABER PARA OTIMIZAR A BUSCA, QUANDO USAR OR COLOCAR O MAIOR VALOR PRIMEIRO
E QUANDO USAR AND COLOCAR O MENOR VALOR PRIMEIRO */

SELECT COUNT(*) FROM CLIENTE; /*RETORNA A QUANTIDADE DE REGISTROS DA TABELA */

SELECT SEXO, COUNT(*) FROM CLIENTE
GROUP BY SEXO;	/* RETORNA QUANTOS SÃO DO SEXO M E QUANTOS SÃO F */

/* PARA ATUALIZAR UM DADO NO NOSSO EXEMPLO ATUALIZAR O EMAIL DA LILIAN */

UPDATE CLIENTE
SET EMAIL = 'LILIAN@HOTMAIL.COM'
WHERE NOME='LILIAN';

/* DELETANDO REGISTROS COM A CLAUSULA DELETE */

DELETE FROM CLIENTE
WHERE NOME = 'ANA';

/* PRIMEIRA FORMA NORMAL */

/*

1 - TODO CAMPO VETORIZADO SE TORNARÁ OUTRA TABELA

2 - TODO CAMPO MULTIVALORADO SE TORNARÀ OUTRA TABELA.
QUANDO O CAMPO FOR DIVISIVEL

3 - TODA TABELA NECESSITA DE PELO MENOS UM CAMPO QUE IDENTIFIQUE
TODO O REGISTRO COMO SENDO UNICO. ISSO É O QUE CHAMAMOS DE CHAVE PRIMARIA OU PRIMARY KEY.

*/

CREATE DATABASE COMERCIO;

USE	COMERCIO;

CREATE TABLE CLIENTE(
	IDCLIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	SEXO ENUM('M','F') NOT NULL,
	EMAIL VARCHAR(50) UNIQUE,
	CPF VARCHAR(15) UNIQUE
);

CREATE TABLE ENDEREÇO(
	IDENDEREÇO INT PRIMARY KEY AUTO_INCREMENT,
	RUA VARCHAR(30) NOT NULL,
	BAIRRO VARCHAR(30) NOT NULL,
	CIDADE VARCHAR(30) NOT NULL,
	ESTADO CHAR(2) NOT NULL,
	ID_CLIENTE INT UNIQUE,
	FOREIGN KEY (ID_CLIENTE)	/* PRECISO COLOCAR ISSO PARA CRIAR UMA LIGAÇÃO ENTRE AS TABELAS */
	REFERENCES CLIENTE (IDCLIENTE)
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT PRIMARY KEY AUTO_INCREMENT,
	TIPO ENUM('RES','COM','CEL') NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT,
	FOREIGN KEY (ID_CLIENTE)
	REFERENCES CLIENTE(IDCLIENTE)
);

DROP TABLE CLIENTE; /* APAGA A TABELA CLIENTE */

/* INSERINDO DADOS NA TABELA */

INSERT INTO CLIENTE VALUES(NULL,'JOÃO','M','JOÃO@IG.COM','76567587887');
INSERT INTO CLIENTE VALUES(NULL,'CARLOS','M','CARLOS@IG.COM','7325395487');
INSERT INTO CLIENTE VALUES(NULL,'ANA','F','ANA@IG.COM','973459177');
INSERT INTO CLIENTE VALUES(NULL,'CLARA','F',NULL,'279562495612');
INSERT INTO CLIENTE VALUES(NULL,'JORGE','M','JORGE@IG.COM','2654923534');
INSERT INTO CLIENTE VALUES(NULL,'CELIA','F','JCELIA@IG.COM','18134276479');

INSERT INTO ENDEREÇO VALUES(NULL,'RUA ANTONIO SA','CENTRO','B.HORIZONTE','MG',4);
INSERT INTO ENDEREÇO VALUES(NULL,'RUA CAPITAO MENEZES','CENTRO','RIO DE JANEIRO','RJ',1);
INSERT INTO ENDEREÇO VALUES(NULL,'RUA PRES VARGAS','JARDINS','SAO PAULO','SP',3);
INSERT INTO ENDEREÇO VALUES(NULL,'RUA DA ALFANDEGA','ESTACIO','RIO DE JANEIRO','RJ',2);
INSERT INTO ENDEREÇO VALUES(NULL,'RUA DO OUVIDOR','FLAMENGO','RIO DE JANEIRO','RJ',6);
INSERT INTO ENDEREÇO VALUES(NULL,'RUA URUGUAIANA','CENTRO','VITORIA','ES',5);

INSERT INTO TELEFONE VALUES(NULL,'CEL','78458743',5);
INSERT INTO TELEFONE VALUES(NULL,'RES','73148386',5);
INSERT INTO TELEFONE VALUES(NULL,'CEL','18364792',1);
INSERT INTO TELEFONE VALUES(NULL,'COM','79235927',2);
INSERT INTO TELEFONE VALUES(NULL,'RES','93291847',1);
INSERT INTO TELEFONE VALUES(NULL,'CEL','30823844',3);
INSERT INTO TELEFONE VALUES(NULL,'CEL','92597259',3);
INSERT INTO TELEFONE VALUES(NULL,'COM','28734525',1);
INSERT INTO TELEFONE VALUES(NULL,'RES','97147174',5);
INSERT INTO TELEFONE VALUES(NULL,'CEL','39734713',2);

/* JUNTANDO DUAS TABELAS */ 
SELECT NOME, SEXO,BAIRRO, CIDADE /*PROJEÇÃO */
FROM CLIENTE /*ORIGEM*/
INNER JOIN ENDEREÇO /* JUNÇÃO */
ON IDCLIENTE = ID_CLIENTE
WHERE SEXO='F'; /* SELEÇÃO */

/* JUNTANDO MAIS DE DUAS TABELAS */
SELECT CLIENTE.NOME, CLIENTE.SEXO, ENDEREÇO.BAIRRO, ENDEREÇO.CIDADE, TELEFONE.TIPO,TELEFONE.NUMERO
FROM CLIENTE
INNER JOIN ENDEREÇO
ON CLIENTE.IDCLIENTE = ENDEREÇO.ID_CLIENTE
INNER JOIN TELEFONE 
ON CLIENTE.IDCLIENTE = TELEFONE.ID_CLIENTE;

/* OU */
SELECT C.NOME, C.SEXO, E.BAIRRO, E.CIDADE, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDEREÇO E
ON C.IDCLIENTE = E.ID_CLIENTE
INNER JOIN TELEFONE T  
ON C.IDCLIENTE = T.ID_CLIENTE;

/* DDL - DATA DEFINITION LANGUAGE */

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME_PRODUTO VARCHAR(30) NOT NULL,
	PREÇO INT,
	FRETE FLOAT(10,2) NOT NULL
);

/* ALTERANDO O NOME DE UMA COLUNA */
ALTER TABLE PRODUTO
CHANGE PREÇO VALOR_UNITARIO INT NOT NULL;

/* MODIFY - ALTERANDO O TIPO */
ALTER TABLE PRODUTO 
MODIFY VALOR_UNITARIO VARCHAR(50) NOT NULL;

/* ADICONANDO COLUNAS */
ALTER TABLE PRODUTO
ADD PESO FLOAT(10,2) NOT NULL;

/* APAGANDO UMA COLUNA */
ALTER TABLE PRODUTO
DROP COLUMN PESO;

/* ADICIONANDO UMA COLUNA NA ORDEM ESPECIFICA */
ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL 
AFTER NOME_PRODUTO;

/* ADICIONANDO UMA COLUNA NA PRIMEIRA POSIÇÃO */
ALTER TABLE PRODUTO
ADD COLUMN PESO FLOAT(10,2) NOT NULL 
FIRST;

/* ADICIONANDO UMA PRIMARY KEY */
ALTER TABLE PRODUTO
ADD PRIMARY KEY(IDPRODUTO);

/* PARA TROCAR UM VALOR NULO POR OUTRA COISA */
IFNULL(EMAIL,'-------------') AS 'EMAIL',

/* RENOMEANDO O NOME DA TABELA */
ALTER TABLE PRODUTO
RENAME ALMOXARIFADO;

/* ADICIONANDO FOREIGN KEY */
ALTER TABLE TABELA
ADD FOREIGN KEY (ID_PESSOA)
REFERENCES ALMOXARIFADO(IDPRODUTO);

/* VOCÊ PODE TRANSFORMAR UMA QUERY EM UMA VIEW */
CREATE VIEW V_RELATORIO AS
SELECT C.IDCLIENTE,C.NOME, C.SEXO, IFNULL(C.EMAIL,'------------') AS EMAIL, C.CPF, E.CIDADE, E.ESTADO, T.TIPO, T.NUMERO
FROM CLIENTE C
INNER JOIN ENDEREÇO E
ON C.IDCLIENTE= E.ID_CLIENTE
INNER JOIN TELEFONE T
ON C.IDCLIENTE = T.ID_CLIENTE;

SHOW TABLES /* MOSTRA AS VIEWS E AS TABLES POR ISSO É BOM NOMEAR A VIEW COMO V_**** PARA DIFERENCIAR ' */

SELECT * FROM V_RELATORIO /*MOSTRA A VIEW */

DROP VIEW V_RELATORIO /*APAGA A VIEW */

/* SE TIVER JOIN NA VIEW, NÃO É POSSIVEL ADICIONAR E NEM DELETAR DADOS, APENAS ATUALIZAR ALGUM DADO */

/* ORDER BY É PARA ORDENAR A TABELA */
SELECT * FROM V_RELATORIO
ORDER BY 1 DESC;  /* OU ORDER BY NOME / E O DESC ORDENA PELA ORDEM INVERSA*/

SELECT * FROM V_RELATORIO
ORDER BY NOME, TIPO; /*PARA ORDENAR NOME E DEPOIS POR TIPO*/

STATUS /*MOSTRA O STATUS DO SISTEMA */

DELIMITER $ /* TROCA O DELIMITADOR PARA $ */

/* STORED PROCEDURES*/
DELIMITER $

CREATE PROCEDURE NOME()
BEGIN
	QUALQUER PROGRAMA;
END
$

DROP PROCEDURE NOME /* APAGA A PROCEDURE NOME */

/* EXEMPLO */
CREATE PROCEDURE CONTA(NUMERO1 INT,NUMERO2 INT)
BEGIN 
	SELECT NUMERO1 + NUMERO2 AS CONTA;
END
$
CALL CONTA(100,50)$

/* EXEMPLO 2 (MAIS PROFISSIONAL) */

CREATE TABLE CURSOS(
	IDCURSOS INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	HORAS INT(3) NOT NULL,
	VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS VALUES(NULL,'JAVA',30,500.00);
INSERT INTO CURSOS VALUES(NULL,'FUNDAMENTOS DE BANCO DE DADOS', 40, 700.00);


DELIMITER #

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),
                           P_HORAS INT(3),
						   P_PRECO FLOAT(10,2))
BEGIN 
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);
END
#

DELIMITER ;
CALL CAD_CURSO('BI SQL SERVER', 35,3000.00);
CALL CAD_CURSO('POWER BI',20,1000.00);
CALL CAD_CURSO('TABLEAU', 30,1200.00);

SELECT * FROM CURSOS;

/* FUNÇÕES PROGRAMADAS */

SELECT MAX(VALOR) AS MAX_VAL,  /* TRAZ O MAX VALOR DE UMA COLUNA */
	   MIN(VALOR) AS MIN_VAL,	/* TRAZ O MIN VALOR DE UMA COLUNA */
	   TRUNCATE(AVG(VALOR),2) AS MEDIA_VAL	/* TRUNCA A MEDIA PARA DEIXAR SÓ DOIS ALGARISMOS DEPOIS DA VIRGULA */
	   FROM CURSOS;
	   
/* FUNÇÃO SUM */

SELECT SUM(VALOR) AS TOTAL
FROM CURSOS;

SELECT HORAS, SUM(VALOR) AS TOTAL
FROM CURSOS 
GROUP BY HORAS; /* SOMAS OS PREÇOS DOS GRUPOS COM MESMA CARGA HORARIA */

/* SUBQUERIES SÃO USADAS QUANDO UMA QUERY DEPENDE DO RESULTADO DE DENTRO DE UMA QUERY */
SELECT NOME,VALOR
FROM CURSOS
WHERE VALOR = (SELECT MAX(VALOR)FROM CURSOS);

SELECT NOME, VALOR  
FROM CURSOS
WHERE VALOR > (SELECT AVG(VALOR) FROM CURSOS);

/* SOMANDO AS LINHAS, EXEMPLO QUERO SOMAR O TOTAL QUE OS VENDEDORES VENDERAM NOS PRIMEROS MESES */
SELECT NOME,
	   JANEIRO,
	   FEVEREIRO,
	   MARÇO,
	   (JANEIRO+FEVEREIRO+MARÇO) AS "TOTAL",
	   TRUNCATE ((JANEIRO+FEVEREIRO+MARÇO)/3,2) AS "MEDIA"
	   FROM VENDEDORES;

/* VERIFICAR AS CHAVES CONSTRAINTS */
SHOW CREATE TABLE CURSOS;


/* CRIANDO CONSTRAINTS DE FORMA MAIS PROFISSIONAL */
CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(10) NOT NULL
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT 
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

/* DICIONARIO DE DADOS (POR ISSO É BOM NOMEAR UMA FOREIGN KEY */
SHOW DATABASES;
USE INFORMATION_SCHEMA;
STATUS
SHOW TABLES;
DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO",
	   TABLE_NAME AS "TABELA",
	   CONSTRAINT_NAME AS "NOME REGRA",
	   CONSTRAINT_TYPE AS "TIPO"
	   FROM TABLE_CONSTRAINTS
	   WHERE CONSTRAINT_SCHEMA = "COMERCIO";
	   
/* APAGANDO CONSTRAINTS */
USE COMERCIO;

ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

/* ESTRUTURA DE UMA TRIGGER */
CREATE TRIGGER NOME
BEFORE / AFTER INSERT/DELETE/UPDATE ON  TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INICIO 

	QUALQUER COMANDO SQL

END -> FIM

/* AUTORELACIONAMENTO, PARA RELACIONAR UMA TABELA COM ELA MESMA  */

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR (30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY (ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELIGENCE',40,800.00,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANÇADOS',20,600.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAM',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'RUBY',30,500.00,4);

SELECT * FROM CURSOS;

SELECT NOME, VALOR, HORAS, IFNULL(ID_PREREQ,"SEM REQ") REQUISITO
FROM CURSOS;

/* COLOCANDO O NOME DO CURSO NO PRÉ REQUISITO */
SELECT C.NOME, C.VALOR, C.HORAS, IFNULL(P.NOME,"-----") AS PREREQ
FROM CURSOS C
LEFT JOIN CURSOS P   /* LEFT JOIN PEGA TUDO QUE ESTÁ NA JUNÇÃO E QUE ESTÁ A ESQUERDA(NESSE CASO CURSOS C) */
ON P.IDCURSO = C.ID_PREREQ;


/* AULA 45 - CURSORES */

CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDORES INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT
);

INSERT INTO VENDEDORES VALUES(NULL,'MAFRA',27354,78245,67325);
INSERT INTO VENDEDORES VALUES(NULL,'CLARA',82365,743952,73457);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO',762763,134345,91034);
INSERT INTO VENDEDORES VALUES(NULL,'LILIAN',0297454,24752,49712);
INSERT INTO VENDEDORES VALUES(NULL,'ANTONIO',383641,124873,529375);
INSERT INTO VENDEDORES VALUES(NULL,'GLORIA',608127,32084,836502);

SELECT * FROM VENDEDORES;

SELECT NOME, (JAN+FEV+MAR) AS TOTAL FROM VENDEDORES;
SELECT NOME, (JAN+FEV+MAR) AS TOTAL,(JAN+FEV+MAR)/3 AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL(
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MAR INT,
	TOTAL INT,
	MEDIA INT
);

DELIMITER $

CREATE PROCEDURE INSEREDADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3, VTOTAL, VMEDIA INT;
	DECLARE VNOME VARCHAR(50);
	
	DECLARE REG CURSOR FOR( 
		SELECT NOME, JAN,FEV,MAR FROM VENDEDORES
	); /* AQUI DECLARA UM VETOR */
	
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM =1;  /* VAI FAZER O LOOPING ATÉ ENCONTRAR UM ESPAÇO VAZIO, AÍ O FIM RECEBE O VALOR 1, E O LOOPING ACABA */
	
	OPEN REG;
	
	REPEAT 
	
		FETCH REG INTO VNOME, VAR1, VAR2,VAR3;
		IF NOT FIM THEN
			SET VTOTAL= VAR1 + VAR2 + VAR3;
			SET VMEDIA = VTOTAL /3;
			
			INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);
		END IF; /* DO FETCH ATÉ AQUI É O QUE MAIS VAI MUDAR(POIS É ONDE VOCÊ FALA O QUE VAI ACONTECER), O RESTO É RECEITA DE BOLO, TUDO IGUAL */ 
	
	UNTIL FIM END REPEAT;
	
	CLOSE REG;
END
$

DELIMITER ;

SELECT * FROM VENDEDORES;

CALL INSEREDADOS();

SELECT * FROM VEND_TOTAL;
